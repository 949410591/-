启动mysql
	启动服务器，
		sudo service mysql start
		
	登入mysql
		mysql -u root 密码

	退出mysql
		成功地连接后，可以在mysql>提示下输入QUIT (或\q) 、exit 随时退出

多行输入
	可以多行输入
		mysql接受自由格式的输入：它收集输入行但直到看见分号才执行

	取消多行输入
		\c

	mysql的提示符
		mysql> 准备接收新命令
		->等待多行命令的下一行
		'("或`)等待下一行，等待以xxx开始的字符串的结束
		/*> 等待下一行，等待以/*开始的注释的结束

保留字
	大小写都行，看心情，所有语句都是，大写主要是区分
	保留字（高级语言已经定义过的字，不能作为变量名或者过程名使用）和变量名
	
导入sql文件
	source /home/shiyanlou/Desktop/SQL3/MySQL-03-01.sql;

数据库操作	
	创建数据库，
		CREATE DATABASE <name>;

	查看所有数据库
		show databases;
	
	使用数据库
		use <数据库名>；也可以不加；
		
	删除数据库
		DROP database <DATABASENAME>;

表格操作		
	创建数据表
		CREATE TABLE <name>（名字不能单纯用数字）
		(
		列名a 数据类型（数据长度）,
		列名b 数据类型（数据长度）,
		列名c 数据类型（数据长度）,
		);
		
	查看数据表结构
		DESCRIBE pet; 会显示表数据的名字、类型等具体内容
		show create table <table_name>;
		非常详细

	删除数据表
		DROP TABLE 表名;
			
	数据类型
		数据类型 	大小(字节) 		用途 				格式
		INT 		4 				整数 	
		FLOAT 		4 				单精度浮点数 	
		DOUBLE 		8 				双精度浮点数 	
					
		ENUM 						单选,比如性别 		ENUM('a','b','c')
		SET 						多选 				SET('1','2','3')
					
		DATE 		3 				日期 				YYYY-MM-DD
		TIME 		3 				时间点或持续时间 	HH:MM:SS
		YEAR 		1 				年份值 				YYYY
					
		CHAR 		0~255 			定长字符串 	
		VARCHAR 	0~255 			可变字符串 	
		TEXT 		0~65535 		长文本数据
		
		
		整数除了 INT 外，还有 TINYINT、SMALLINT、MEDIUMINT、BIGINT。

		CHAR 和 VARCHAR 的区别: CHAR 的长度是固定的，而 VARCHAR 的长度是可以变化的，比如，存储字符串 “abc"，对于 CHAR(10)，
		
		表示存储的字符将占 10 个字节(包括 7 个空字符)，而同样的 VARCHAR(12) 则只占用4个字节的长度，增加一个额外字节来存储字符串本身的长度，
		
		12 只是最大值，当你存储的字符小于 12 时，按实际长度存储。

		ENUM和SET的区别: ENUM 类型的数据的值，必须是定义时枚举的值的其中之一，即单选，而 SET 类型的值则可以多选。

		想要了解更多关于 MySQL 数据类型的信息，可以参考下面两篇博客
			http://www.cnblogs.com/bukudekong/archive/2011/06/27/2091590.html
			http://blog.csdn.net/anxpp/article/details/51284106#comments
			
	SQL 的约束
		添加源码
			source /home/shiyanlou/Desktop/SQL3/MySQL-03-01.sql;

		primary key!
			约束表中的一行，一张表中通过主键就能准确定位到一行，因此主键十分重要。主键值不能有重复且不能为空，主键列的值不能进行修改和更新
			一般主键
				id INT（10）PRIMARY KEY(<name>)
				
			复合主键
				CONSTRAINT <name（这个是主键的自定义名字）PRIMARY KEY (name1,name2,...)>  
				http://blog.csdn.net/qq_27231343/article/details/52326893
				他们组成的值不能重复'
				
		auto_increment
			自增
			
			查看上次的值
				select last_insert_id();
		
		DEFAULT
			DEFAULT 约束只会在使用 INSERT 语句（上一实验介绍过）时体现出来，INSERT语句中，如果被 DEFAULT 约束的位置没有值，那么这个位置将会被 DEFAULT 的值填充，
			简单说就是默认值,只支持常量，不支持用函数作为默认值
		
		UNIQUE
			它规定一张表中指定的一列的值必须不能有重复值，即这一列每个值都是唯一的。
		
		FOREIGN KEY
			只能插入参考的主键的值
			外键 (FOREIGN KEY) 既能确保数据完整性，也能表现表之间的关系。
			一个表可以有多个外键，每个外键必须 REFERENCES (参考) 另一个表的主键，被外键约束的列，取值必须在它参考的列中有对应值
			在 INSERT 时，如果被外键约束的值没有在参考列中有对应，比如以下命令，参考列 (department 表的 dpt_name) 中没有dpt3，则INSERT 失败
				INSERT INTO employee VALUES(02,'Jack',30,3500,114114,'dpt3');
			可见之后将 dpt3 改为 dpt2（department 表中有 dpt2），则插入成功
				INSERT INTO employee VALUES(02,'Jack',30,3500,114114,'dpt2');
			引擎
				外键不能跨引擎，只能与相同引擎的表格设置外键
			
		NOT NULL
			非空约束 (NOT NULL),听名字就能理解，被非空约束的列，在插入值时必须非空。
			5.6 版本以上的 MySQL 会报错，禁止插入不符合非空约束的数据，如果是以下的版本会直接默认填0
			
		CREATE TABLE 表名 (	
							属性名 数据类型 [完整性约束条件],
							属性名 数据类型 [完整性约束条件],
							.
							.
							.
							属性名 数据类型 [完整性约束条件]
							);
			
		CREATE TABLE department
		(
		  dpt_name   CHAR(20) NOT NULL,
		  people_num INT(10) DEFAULT '10',
		  CONSTRAINT dpt_pk PRIMARY KEY (dpt_name)
		 );

		CREATE TABLE employee
		(
		  id      INT(10) PRIMARY KEY,
		  name    CHAR(20),
		  age     INT(10),
		  salary  INT(10) NOT NULL,
		  phone   INT(12) NOT NULL,
		  in_dpt  CHAR(20) NOT NULL,
		  UNIQUE  (phone),
		  CONSTRAINT emp_fk FOREIGN KEY (in_dpt) REFERENCES department(dpt_name)
		 );
		 
		CREATE TABLE project
		(
		  proj_num   INT(10) NOT NULL,
		  proj_name  CHAR(20) NOT NULL,
		  start_date DATE NOT NULL,
		  end_date   DATE DEFAULT '2015-04-01',
		  of_dpt     CHAR(20) REFERENCES department(dpt_name),
		  CONSTRAINT proj_pk PRIMARY KEY (proj_num,proj_name)
		 );
	
	对表结构进行修改	
		数据表重姓名
			ALTER TABLE 原名 RENAME 新名;
			
			剩下两种爱记不记
				RENAME TABLE 原名 TO 新名字;

				ALTER TABLE 原名 RENAME TO 新名;

		添加一列
			ALTER TABLE 表名字 ADD 列名字 数据类型 约束;
				爱记不记
				ALTER TABLE 表名字 ADD COLUMN 列名字 数据类型 约束;
			
			没加位置
				ALTER TABLE employee ADD test INT(10) DEFAULT 11 ; 默认放在表的最右边
			
			有加位置
				ALTER TABLE employee ADD test INT(10) DEFAULT 11 FIRST;
				
				ALTER TABLE employee ADD test INT(10) DEFAULT 11 列名;

		删除一列
			ALTER TABLE 表名字 DROP 列名字;
				爱记不记
					ALTER TABLE 表名字 DROP COLUMN 列名字;
					
		更改数据类型
			change 改变	想改什么改什么
				ALTER TABLE 表名字 CHANGE 原列名 新列名 数据类型 约束;
				注意：这条重命名语句后面的 “数据类型” 不能省略，否则重命名失败。
			
			modify 改变 只改变数据类型
				ALTER TABLE 表名字 MODIFY 列名字 新数据类型;

		添加约束
			表内约束
				alter table user add constraint unique (email);
				或者
				 alter table user modify email varchar(64) unique;
			
			跨表约束
	
	插入数据
		插入一行
			CREATE TABLE employee (id int(10),name char(20),phone int(12));
			
			INSERT INTO 表的名字(列名a,列名b,列名c) VALUES(值1,值2,值3);
			一般用法
				INSERT INTO employee(id,name,phone) VALUES(01,'Tom',110110110);
			
			懒人用法
				INSERT INTO employee VALUES(02,'Jack',119119119);#需要全部数据都填写
				没有添加的值显示是Null
			
			部分添加用法
				INSERT INTO employee(id,name) VALUES(03,'Rose');
			
		提高整体性能
			如果客户端被多个客户访问，insert是很耗时间的，而且它可能降低待处理的select语句的性能，所以可以添加low_priority 来降低mysql处理insert语句的优先级
			insert low_priority into articles(title,body) values('mysql manual','i am mysql');
		
		插入多行	
			INSERT INTO articles (title,body) VALUES
			('MySQL Tutorial','This database tutorial ...'),
			("How To Use MySQL",'After you went through a ...'),
			('Optimizing Your Database','In this database tutorial ...'),
			('MySQL vs. YourSQL','When comparing databases ...'),
			('MySQL Security','When configured properly, MySQL ...'),
			('Database, Database, Database','database database database'),
			('1001 MySQL Tricks','1. Never run mysqld as root. 2. ...'),
			('MySQL Full-Text Indexes', 'MySQL fulltext indexes use a ..'); 
			
			当然也可以一句一句写，但是这样数据库处理的性能就没有一条语句处理性能高，
			所以多行插入最好使用以上的形式
		
		插入检索出的数据
			insert into articles(title, body) select title,body from articles limit 1;
				
	SELECT 基础语法
		格式
			SELECT 要查询的列名（，另一个列名） FROM 表名字 WHERE 限制条件;
			
			SELECT * FROM table_name; 是查询表的所有内容
				SELECT name,age FROM employee WHERE age>25;
				
			一般用法
				SELECT name,age FROM employee;
			
		where条件
			操作符
				符号 (=,<,>,>=,<=,!=(<>),BETWEEN X AND)
				
				SELECT name,age,phone FROM employee WHERE name='Mary';	
				SELECT name,age FROM employee WHERE age>25;
			
			is null
				select * from employee where age is null;
			
			AND OR IN
				SELECT name,age FROM employee WHERE age<25 OR age>30;
				SELECT name,age FROM employee WHERE age>25 AND age<30;
					而刚才的限制条件 age>25 AND age<30 ，如果需要包含25和30这两个数字的话，可以替换为 age BETWEEN 25 AND 30
				
				select * from employee where age <25 or (salary<3000 and in_dpt='dpt2');
					最好是用（）来表示优先级

			通配符 _ %
				其中 _ 代表一个未指定字符，% 代表不定个未指定字符。
					比如，要只记得电话号码前四位数为1101，而后两位忘记了，则可以用两个 _ 通配符代替：
					SELECT name,age,phone FROM employee WHERE phone LIKE '1101__';
					这样就查找出了1101开头的6位数电话号码
					
					另一种情况，比如只记名字的首字母，又不知道名字长度，则用 % 通配符代替不定个字符：
					SELECT name,age,phone FROM employee WHERE name LIKE 'J%';
					这样就查找出了首字母为 J 的人
					
			正则表达式
				select * from employee where age <25 or (salary<3000 and in_dpt='dpt2');
							
		排序
			SELECT name,age,salary,phone FROM employee ORDER BY salary这是某一列的名字） DESC（asc是升序）;
			不填升降序默认升序
			
			select * from employee order by age desc, salary desc;
			先排age，然后相同age的排salary
		
		限制结果
			select * from employee limit 5;#限制显示五行
			
			select * from employee limit 5,2;#显示从第五行开始的前2行
			
			行数不够时，会显示能显示的行数
		
		计算字段
			拼接字段
				select concat(rtrim(name),'(',age,')') as name from employee;
					rtrim除去右边的空格
					ltrim除去左边的空格
					trim出去左右两边的空格
					
					as 另作别名
			
			执行算术计算
				+-*/
				select age*salary as age_salary from employee;
				
		内置函数
			文本处理函数
				rtrim除去右边的空格
				ltrim除去左边的空格
				trim出去左右两边的空格
				......
					
			日期和时间处理
				curdate()
				curtime()
				now()
				......
				
			数值处理	
				函数名： 	COUNT 	SUM 	AVG 		MAX 	MIN     
				作用： 		计数 	求和 	求平均值 	最大值 	最小值		
				
				SELECT MAX(salary) AS max_salary,MIN(salary) FROM employee;

				有一个细节你或许注意到了，使用AS关键词可以给值重命名，比如最大值被命名为了max_salary
		
		分组数据
			数据分组
				select in_dpt,count(id) from employee group by in_dpt;
				
			数据过滤
				select in_dpt,count(id) as id_num from employee group by in_dpt having id_num>3;
					having 和 where的差别在于where是在分组之前过滤，having是在分组之后过滤
		
		select 语句顺序
			select ... from ... where ... group by ... having ... order by ... limit ...
		
		子查询
			利用子查询进行过滤
				select name, age from employee where in_dpt in (select of_dpt from project where proj_num=1 );
				把查询结果的条件限制在另一个查询结果里
				这种查询方法可以多层嵌套
			
			作为计算字段使用子查询
				select  proj_name, of_dpt, (select count(name) from employee where employee.in_dpt = project.of_dpt) as p_num from project;
				注意括号的子查询的where条件
			
		联结查询
			简单联结
				SELECT id,name,people_num
				FROM employee,department
				WHERE employee.in_dpt = department.dpt_name
				ORDER BY id;
				#两表联合查询
				
				select name, age, people_num, proj_name from employee, project, department 
				where department.dpt_name = employee.in_dpt and employee.in_dpt = project.of_dpt;  #多表联合查询
				
			表别名
				select name, age, people_num, proj_name from employee as e, project, department where department.dpt_name = e.in_dpt and e.in_dpt = pr
			
			其它不同类型的联结
				自联结
					需要联结同一个表格
					select e1.name, e1.age, e1.salary, e2.in_dpt from employee as e1, employee
					
				自然联结
					select e.*, d.people_num from employee as e, department as d where e.in_dpt = d.dpt_name order by id;
					一行数据会出现在不同表中，所以会导致相同列会出现多次
					
				外部联结
					select * from user right join groups on user.id = groups.id;
					select * from user right outer join groups on user.id = groups.id;
					select * from user left join groups on user.id = groups.id; 
					select * from user left outer join groups on user.id = groups.id; 
					select * from user inner join groups on user.id = groups.id; 
					
			使用带聚集函数的联结
				使用函数来联结，使用group by来分组联结
				select count(e.name) as p_num , p.of_dpt from employee as e, project as p where e.in_dpt = p.of_dpt group by p.of_dpt;

		组合查询 union
			用来组合两个或两个以上的select语句的结果，自动删除重复结果
				select * from employee where age < 25 union select * from employee where in_dpt in ('dpt2','dpt3') order by id;
			
			需要显示所有结果 union all
				select * from employee where age < 25 union all select * from employee where in_dpt in ('dpt2','dpt3') order by id;
		
		文本搜索
			全文搜索的支持引擎
				InnoDB
				
				create table notes(
					note_id int not null primary key auto_increment,
					note_text text,
					fulltext(note_text)
				)engine=InnoDB;
			
			进行全文搜索
				select * from notes where match(note_text) against('float');
				
			全文索搜结果排列
				select * from notes where match(note_text) against('float');
				这里没有筛选条件，所以会显示所有结果，然后直接文本搜索的语句当作计算列
			
			使用查询扩展
				select * from notes where match(note_text) against('float' with query expansion);
			
			布鲁尔文本搜索
				没有fulltext索引也可以使用，但是一种随着数据量的增加性能而降低的操作
			
				+ 一定有
				- 一定没有
				> 提高等级值
				< 降低等级值
				~ 取消一个词的排序词
				() 子表达式
				"" 定义一个短语
			
				select * from articles where match(title, body) against('database ~text' in boolean mode);

	对表内容修改
		修改内容
			UPDATE 表名字 SET 列1=值1,列2=值2 WHERE 条件;
				注意：一定要有WHERE条件，否则会出现你不想看到的后果
				update user set user_name='hanhan5' where id =5;
				
			ignore关键字
				如果在更新多行数据的时候，其中有一个数据发生了错误，那么mysql会取消所有更新
				如果要忽略这种行为，可以使用ignore关键字，这样即使发生错误也会保持之前更新过的数据
				update ignore user set user_name='hanhan5' where id =5;
				
		删除内容
			DELETE FROM 表名字 WHERE 条件;
			
			如果需要删除所有行可以使用
				truncate table user;
			这个实际上是删除了原来的表然后重新创建了一个新表
			
		更新和删除的指导原则
			更新和删除一行先使用select来检测是否是预期行
			
			一定要使用where来限制
			
			保证每个表都有主键，而且在where中使用
			
			使用强制性实施引用完整性的数据库，这样mysql将不允许删除具有与其他表格相关联的数据行；（外键和主键）
			
			mysql是没有撤消按钮，所以小心使用删除和更新
									
	索引
		数据库的目录，为了提高检索效率
		用法
			alter table 表名 add index 索引名（列名）;
		
		另一种用法
			create index 索引名 on 表名（列名）;
		
		举个例子
			alter table employee add index idx_id(id);
			create table index_name on employee(name);
		
		在使用SELECT语句查询的时候，语句中WHERE里面的条件，会自动判断有没有可用的索引。
		SHOW INDEX FROM 表名字; 查看刚才新建的索引：
		
	视图
		创建一个表来展示你想看到的数据
		
		CREATE VIEW 视图名(列a,列b,列c) AS SELECT 列1,列2,列3 FROM 表名字;
		
		查询这个试图，和表查询一样
			select *from 视图名
		
		也可以添加过滤条件
			create view e_view as select concat(name,'(',age,')') as 'name(age)' , salary from employee 
			select * from e_view where salary >3000;

存储过程
	创建和执行存储过程
		drop PROCEDURE s_t;
		delimiter //  #定义分隔符

		create PROCEDURE s_t(
		  in number int,#有三种参数设置， in 、out 、 inout
		  out total int
		)
		BEGIN
		  select sum(age*salary)
		  into total
		  from employee 
		  where id = number;
		  
		 
		END//
		delimiter ; #使用完重新定义回来

		call s_t(2,@t);#执行，储存的变量需要在名字之前用@
		select @t;
		
		特别注意inout参数的调用,需要先set变量的值
			delimiter //

			create PROCEDURE s_t(
			  in number int,
			  inout total int
			)
			BEGIN
			  select sum(age*salary)*total
			  into total
			  from employee 
			  where id = number;
			  
			 
			END//
			delimiter ;
			set @t = 2;
			call s_t(2,@t);
			select @t;
		
	删除存储过程
		drop procedure xxx;
		
	建立智能存储过程
		
	
导入
	把什么文件的数据给什么表
	LOAD DATA INFILE '文件路径和文件名' INTO TABLE 表名字;
	默认路径：/var/lib/mysql-files/
	
	可以是备份的文件，也可以是自己写的txt文件只要符合 规范就行
			xxx	xxx	xxx	xxx	xxx

导出
	把来自什么表的数据给什么文件
	SELECT 列1，列2 INTO OUTFILE '文件路径和文件名' FROM 表名字;
		注意：语句中 “文件路径” 之下不能已经有同名文件。
	SELECT * INTO OUTFILE '/tmp/out.txt' FROM employee;

备份
	备份与导出的区别：导出的文件只是保存数据库中的数据；而备份，则是把数据库的结构，包括数据、约束、索引、视图等全部另存为一个文件。
	 
	mysqldump -u root 数据库名>备份文件名;   #备份整个数据库

	mysqldump -u root 数据库名 表名字>备份文件名;  #备份整个表

恢复
	source /tmp/SQL6/MySQL-06.sql
	另一种
		mysql -u root          #因为在上一步已经退出了MySQL，现在需要重新登录

		CREATE DATABASE test;  #新建一个名为test的数据库
		
		mysql -u root test < bak.sql
		
加载数据
	文件加载
		LOAD DATA INFILE '/home/shiyanlou/Desktop/pet.txt' INTO TABLE pet;
		
	
	语句加载
		INSERT INTO pet VALUES ('Puffball','Diane','hamster','f','1999-03-30',NULL);
		当然还有其他格式
	
从表检索信息
	查询数据
		SELECT * FROM pet;
	
	更改数据值
		UPDATE pet SET birth = '1989-08-31' WHERE name = 'Bowser';
		
跨表联合查询
	select * from course join user on course.teacher_id = user.id;
	
[client]
default-character-set = utf8

[mysqld]
character-set-server = utf8
skip-grant-tables
[mysql]
default-character-set = utf8

		
		

