第一章 java环境开发

windows操作系统当中常用的DOS命令：
	* 不使用UI界面，使用DOS命令可以完成所有的操作。

	* 在哪里执行DOS命令？
		- 在DOS命令窗口中可以执行DOS命令

	* 怎么打开DOS命令窗口呢？
		- 快捷键：win + r，打开运行窗口
		- 输入cmd回车

	常用命令
		* 查看IP配置：
			- ipconfig
			- ipconfig /all  可以查看更详细的IP信息，这种查看方式可以看到网卡的物理地址。
								  物理地址具有全球唯一性。是在生产网卡的时候，嵌入的编号。
		* 清屏：
			cls

		* DOS窗口当中也可以设置字体和屏幕以及文字的颜色。
			color ？ 
			这个命令color和问号之间是有空格的
			color命令的帮助文档

		* 退出DOS命令窗口
			exit

		* 怎么从DOS命令窗口当中复制粘贴文本：
			ctrl c + ctrl v

		* 查看两台计算机之间是否可以正常通信：
			- ping 192.168.27.23   【发送和接收数据包4次】
			- ping 192.168.27.23 -t 【一直不停的发送和接收数据包】
			- ping www.baidu.com

			登录百度：http://119.75.218.70

		* 强行终止DOS命令窗口中正在运行的程序：ctrl + c

		* 打开DOS命令窗口默认所在的路径是：C:\Users\Administrator\???

		* 创建目录：mkdir abc【表示在当前所在目录下新建一个目录，起名abc】

		* 关于目录切换命令：cd

			- cd 命令的语法格式：

				cd 路径

			- 路径分为：

				- 绝对路径：
					C:\Users\Administrator
					D:\用户目录\收藏夹
					F:\tools\CamtasiaStudio-v6.00
					......

					从硬盘的根路径作为出发点。

				- 相对路径：
					从当前所在的位置作为起点的路径。
			
			- 自动补全：
				cd e 【然后按tab键，当前所在的目录下所有以e开始的目录自动补全路径，
					   当这个自动补全的路径不是自己想要的路径，可以继续使用tab键】
			
			- 回到上级目录：cd .. 【..是一个路径，代表当前路径的上级路径】
					cd ../../../

			- 直接回到根路径：cd \

		* 查看当前目录下所有的子文件和子目录：
			dir

		* 不要把相关重要的资料放到桌面上，因为桌面是属于C盘系统盘。

		* 怎么切换盘符：【不需要使用cd命令】
			c: 回车
			d: 回车
			e: 回车 
			f: 回车
	
什么是JDK？
	* Java Development Kits
	* Java开发工具箱【Java开发必备】
	* 可以从Oracle的官网上下载。http://www.oracle.com
	* 下载JDK的时候需要注意：JDK的版本，不同的操作系统需要安装不同版本的JDK。

Java分三大块：1999年

	* J2SE【Java的标准版本】：

		基础，无论是以后走EE还是ME，SE是必须要精通的。
		J2SE是SUN公司为java程序员准备的一套“基础类库”，这套基础类库学习之后，可以完成最基本的操作，
		例如，文件的读写、线程的控制....

	* J2EE【Java的企业版本】：

		这是SUN公司为程序员专门准备的一套“类库”，这套类库可以协助程序员完成企业级软件的开发
		企业级软件：OA办公系统、进销存系统、超市系统.......

	* J2ME【Java的微型版本】
		
		这是SUN公司为java程序员专门准备的另一套“类库”，这套类库可以协助程序员完成微型设备的嵌入式开发，
		Java最初就是做微型设备嵌入式开发的。

Java语言特性：

	* 跨平台/可移植 
		-说白了就是在linux上面写的程序，不需要任何改动也可以在windows上运行，这就是可移植性或者说跨平台。
		- 有一种特殊的机制：JVM
		- Java程序并没有和底层的操作系统直接交互，java程序实际上运行在jvm当中，JVM屏蔽了操作系统之间的差异。
		- 但是有一个前提：不同的操作系统中必须安装不同版本的JVM。
		- 在可移植性方面表现非常好，一次编译，到处运行。
		- 但是为了达到可移植，必须提前在操作系统中安装JRE，JRE有了之后才会有JVM。【JVM不能单独安装】
		这方面体验不是特别好。

	* Java号称：开源、免费、跨平台、纯面向对象。

		- 开源：开发源代码，SUN公司编写的java类库的源代码普通程序员能看到。众人拾柴火焰高。
		这样java程序会很健壮。很少的BUG【漏洞/陷阱】

		- 免费

		- 跨平台：依靠JVM机制【java程序不和操作系统交互，java程序运行在JVM中，JVM和操作系统交互。】
		不同的操作系统有不同版本的JVM。

		- 面向对象：人类在认识现实世界的时候多数是以面向对象的方式认知的。
	
	* 简单性：
		* 这里的简单说的是相对于C语言来说的。
		* 例如：C语言当中有指针，C++中多继承
		* java取消了指针的概念，取消了多继承，只支持单继承。
		* java 底层是用c++实现的
		
	
	* java支持多线程

	* java中还有一种特殊的机制：自动垃圾回收机制。GC机制。
		【java运行过程当中有一个“垃圾回收器”一直在守护者。】
		java在运行过程中产生的垃圾会自动回收，不需要程序员关心

Java的加载与执行：一个完整的java程序
	
	* Java开发的整个生命周期，包括两个重要的阶段，分别是：编译阶段和运行阶段

	* 编译生成的程序被称为：字节码程序。编译生成的文件是：xxx.class文件

	* 编译和运行可以在不同的操作系统中完成。

	* 程序员在xxx.java文件中编写源代码，源代码必须符合java的语法，这些源代码就是高级语言。
	存放源代码的文件被称为源文件。

	* 过程：

		编译期：【在windows环境中完成】
			- 安装JDK，配置环境
			- 在硬盘的某个位置创建一个xxx.java源文件
			- 打开源文件，在该文件当中编写符合java语法的源程序，然后保存。
			- 使用JDK中自带的javac.exe命令对以上的java源程序进行编译。
				* 编译通过：说明语法没有问题
					- 在硬盘上生成一个或者多个字节码文件【xxx.class】
					- class 文件是最终执行的文件
				* 编译失败：说明源程序某个位置不符合java语法格式。
				* 编译的语法格式：打开DOS命令窗口，输入：javac 源文件路径

				注意：
					- 源文件路径可以是绝对路径，也可以是相对路径。
					- 编译之后，其实java源文件删除不会影响程序的执行。
					- 最好不要将java源文件删除，因为程序最终运行效果不是预期效果的时候，需要
					重新修改java源代码，然后进行重新编译生成全新的class字节码文件，再重新运行
					字节码程序。

		---------------------------------------------------------------------------

		运行期：【可以不在windows中完成，可以换一个操作系统，但前提是该操作系统中已经安装java的运行时环境】

			- 打开命令窗口，在命令窗口中使用java.exe命令运行java程序，语法格式：
				java 类名

				注意：java这个命令使用的时候，java命令后面不是文件的路径。必须是一个“类名”。
				例如：
					java Hello  
					java Student
					java User
					java Product
					不要写成 java hello.class 这个格式，直接写类名就行

			- 以上程序的执行原理：
				* java.exe命令执行会启动：JVM
				* JVM启动之后，马上启动“类加载器-Class Loader”
				* ClassLoader负责去硬盘的“某个位置”上搜索“类名.class”字节码文件。
				* 找不到这个.class文件，一定会出现程序异常现象。
				* 找到了这个.class文件之后将.class文件转换成"二进制"，操作系统可以直接识别二进制，
				操作系统执行二进制码和底层的硬件平台进行交互。
				
 开始第一个java程序的开发
	
	* JDK下载

	* JDK安装
		JDK包括JRE（运行环境）
	* JRE有单独软件安装
		包括JVM
	* 在硬盘的某个位置上新建一个java源文件：HelloWorld.java

	* 在HelloWorld.java文件中编写源代码

	* 打开命令窗口，使用javac命令进行编译： 
		javac 源文件路径

		出现以下错误：
			C:\Users\Administrator>javac
			'javac' 不是内部或外部命令，也不是可运行的程序
			或批处理文件。
		
		怎么解决？

			第一种方案：切换到javac.exe文件所在的目录，这个时候使用javac.exe不会出问题，但是这种方式比较麻烦。

			第二种方案：配置环境变量path
		
		原理：windows操作系统在查找某个命令的时候是怎么查找的？
			* 首先会从当前目录下找这个命令
			* 当前目录下不存在这个命令的话，会去环境变量path指定的路径当中查找该命令。
			* 还是找不到则出现错误提示信息。

			- path环境变量隶属于windows操作系统，和java无关，这个环境变量主要用来指定命令的搜索路径。
		
		环境变量怎么配置？

			计算机 --> 点击右键 --> 属性 --> 高级系统设置 --> 环境变量

		环境变量配置包括用户级别和系统级别

		任何一个环境变量都有变量名和变量值，例如path环境变量：
			变量名是:path
			值：路径【多个路径之间必须采用分号隔开，而且要求分号必须是半角分号】
			path=C:\Program Files (x86)\Java\jdk1.7.0_75\bin;otherpath;otherpath.....
	
		编译1【绝对路径】：D:\course\JavaProjects>javac D:\course\JavaProjects\02-JavaSE\day01\HelloWorld.java
		编译2【相对路径】：D:\course\JavaProjects>javac 02-JavaSE\day01\HelloWorld.java
		编译3【相对路径】：D:\course\JavaProjects\02-JavaSE\day01>javac HelloWorld.java

		修改完以后要重新开启dos窗口才能使用新设定的path

	* 运行：
		- 必须将路径切换到“D:\course\JavaProjects\02-JavaSE\day01”目录下
		- 执行：java HelloWorld

		- D:\course\JavaProjects\02-JavaSE\day01>java HelloWorld
			Hello World!
			
打开DOS命令窗口，执行java HelloWorld，执行原理？
	* java.exe命令会启动JVM
	* JVM启动之后会启动类加载器ClassLoader
	* ClassLoader会在硬盘上的某个位置搜索HelloWorld.class字节码文件
	* 找到该文件则执行
	* 找不到该文件则报错

	疑问:ClassLoader是在哪个位置上搜索HelloWorld.class字节码文件的？
		* 默认情况下，ClassLoader从当前路径下加载xxx.class字节码文件
		* 当然，也可以让ClassLoader去某个指定的路径下加载字节码文件，这时需要配置环境变量classpath
		* classpath环境变量属于java语言中的环境变量，不属于windows操作系统【PATH环境变量属于操作系统】
		* classpath是给ClassLoader类加载器指路的。
		* 设置这样的环境变量：classpath=D:\course\JavaProjects\02-JavaSE\day02
			- 打开dos命令窗口在任意位置，都可以执行：java HelloWorld
		* classpath环境变量没有配置的话，类加载器默认从当前路径下找字节码文件，
		当classpath环境变量配置为某个指定的路径之后，类加载器只去指定的路径当中加载字节码文件。
		* 综上所述，环境变量classpath不再配置，这样类加载器会自动从当前路径下加载class字节码文件。
		所以，每一次执行.class程序的时候，需要在DOS命令窗口中先切换到.class字节码文件所在的路径下。
		然后运行。
		* 当然，classpath也可以这样配置：classpath=.

		注意：
			路径中“..”表示上级目录
			路径中“.”表示当前目录   
			
关于java源程序当中的注释：
	
	* 什么是注释？注释的作用是什么？
		- 出现在java的源程序当中，对java源代码的解释说明
		- 注释不会被编译到.class字节码文件当中		    
		- 一个好的开发习惯应该是多编写注释，这样程序的可读性比较强。
	
	* java中的注释怎么写呢？
		- 单行注释
			//单行注释，只注释当前行

		- 多行注释
			/*
				多行注释
				多行注释
				多行注释
				多行注释
				多行注释
				.....
			*/

		- javadoc注释
			/**
			*	javadoc注释
			*	javadoc注释
			*	javadoc注释
			*	javadoc注释
			*	javadoc注释
			*	javadoc注释
			*/
			注意：这种注释是比较专业的注释，该注释信息会被javadoc.exe工具解析提取并生成帮助文档。
   
对HelloWorld程序进行解释：
	//public 表示公开的
	//class表示定义一个类
	//HelloWorld表示一个类名
	public class HelloWorld{ //表示定义一个公开的类，起名HelloWorld
	  //类体【记住】 里面的内容
	  //类体不允许直接编写java语句，除声明变量外
	  //System.out.println("xxxxxxx");这种java语句不允许在类体里编写
	  /*
	  	public表示公开的
		static表示静态的
		void表示空
		main表示方法名是main
		(String[] args)表示main方法的形式参数列表
		需要记住的是：以下的方法是一个程序的“主方法” ，是程序的执行入口
		是sun公司规定的，固定编写方法
	  */
	  public static void main(String[] args){   //表示定义一个公开的静态的主方法
	    //方法体
	    

	    //java语句【java语句以分号“;“结尾，分号必须是半角的分号】
	    //先记住，一下这样的代码的作用是向控制台输出一段消息
	    //以下的双引号必须是半角的双引号【是java语法的一部分】
	    //java中所有的字符串都使用双引号括起来。
	    System.out.println("hello world");
	    //再向控制台输出消息
	    System.out.println("hello jackson!")
	    //输出中文
	    System.out.println("你好,杰克!")
	    //输出文中
	    System.out.println("我是一个程序员")

	  }
	}

	需要记忆：
		* public
		* class
		* static
		* void
		* System.out.println(""); 向控制台输出消息
		* 类体
		* 方法体
		* 类体中不能直接编写java语句【除声明变量之外】
		* 一个java语句必须以“;”结束
		* 方法体中可以编写多条java语句
		* 主方法是程序的入口，固定写法，SUN规定的。  
		
public class 和 class的区别：
	
	* 一个java源文件当中可以定义多个class	
		class A{}
		class B{}
		class C{}

	* 一个java源文件当中public的class不是必须的

	* 一个class会定义生成一个xxx.class字节码文件

	* 一个java源文件当中定义公开的类的话，只能有一个，并且该类名称必须和java源文件名称一致。

	* 每一个class当中都可以编写main方法，都可以设定程序的入口，想执行B.class中的main方法：java B，
	想执行X.class当中的main方法：java X

	* 注意：当在命令窗口中执行java Hello，那么要求Hello.class当中必须有主方法。没有主方法会出现运行
	阶段的错误：
		D:\course\JavaProjects\02-JavaSE\day02>java Hello
		错误: 在类 B 中找不到主方法, 请将主方法定义为:
			public static void main(String[] args)

总结第一章需要掌握的内容：
	* 理解java的加载与执行
	* 能够自己搭建java的开发环境
	* 能够独立编写HelloWorld程序，编译并运行
	* 掌握环境变量path的原理以及如何配置
	* 掌握环境变量classpath的原理以及如何配置
	* java中的注释
	* public class 和 class 的区别
	
第二章：java语言基础

关于java语言的标识符
	什么是标识符
		在java源程序中可以自己命名的单词都是标识符
		标识符在editplus中以黑色字体高亮显示
		标识符可以标识什么元素
			类名
			方法名
			变量名
			接口名
			常量名
			。。。

	标识符的命名规则 【不按照这个规则编译器会报错】
		一个合法的标识符只能由数字、字母、下划线、美元符号组成
		不能以数字开头
		严格区分大小写
		关键字不能做标识符
		理论上无长度限制

	标识符命名规范 【只是一种规范，不属于语法，不遵守编译器不会报错】
		最好见名知意
		遵守驼峰命名方式
			SystemService
			UserService
		类名、接口名：首字母大写，后面每个单词首字母大写
		变量名、方法名：首字母小写，后面每个单词首字母大写
		常量名：全部大写

关键字
	java中关键字都是小写的

字面值
	10、100
	3.14
	“abc”
	‘a'
	true、false
	字面值是数据
	
	数据在现实世界中是分门别类的，所以数据在计算机编程语言中也是有类型的【数据类型 】
		10		整数型字面值
		3.14		浮点型字面值
		true false	布尔型字面值
		"abc"		字符串型字面值
		'A'		字符型字面值
	java语言中字符串型字面值必须用双引号半角的括起来
	java语言中字符型字面值必须用单引号半角的括起来
	字面值会占据内存空间，两个相同的字面值内存空间不一样
	比如：
		System.out.println(123);
		System.out.println(123);
		两条语句里面的字面值是在不同的内存空间
	
变量
	什么是变量
	  	变量本质上是内存中的一块空间，这个空间有数据类型、有名字、有字面值
		变量包含三部分：数据类型、字面值【数据】、名称
		变量是内存存储数据的最基本单元
	
	数据类型的作用
		不同的数据有不同的类型，不同的数据类型底层会分配不同大小的空间
		数据类型是知道程序在运行阶段应该分配多大的内存空间

	变量要求：变量中存储的数据必须和变量的数据类型必须一致

	声明/定义变量的语法格式：
		数据类型 变量名；
			数据类型
				int char float
			变量名
				只要是合法的标识符就行
		
		例如
			int i;
			int age;
			int size;
	变量名怎么赋值
		语法格式
			变量名 = 字面值；
		要求： 字面值的数据类型必须与变量名一致
		= 等号是个运算符，叫做赋值运算符，赋值运算符先运算等号右边的表达式，
		执行结束后的结果赋值给左边的变量
	
	声明和赋值可以放在一起
		int i = 10;

		int a ,b,c = 2; // 注意这里的a、b 没有赋值

		int a = 2,b,c = 2; // 这里b没有赋值
		
		
		
	
	变量赋值后，可以重新赋值，变量的值可变化

	有了变量的概念后，内存空间得到了重复使用

	System.out.println(i);
	System.out.println(i);
	...
	...
	...
	System.out.println(i);

	通常访问一个变量包括两种访问形式：
		第一种：读取变量中保存的具体数据
		第二种：修改变量中保存的具体数据
	
	变量在一行上可以声明多个
	int a, b, c
	
	变量必须先声明赋值后才能访问
		public class IdentifierTest01 
			{
				public static void main(String[] args) 
				{
					int i;//程序运行到这里，内存空间并没有开辟出来，变量i并没有初始化
					System.out.println(i);
				}
			}
		没有赋值直接使用会出现编译报错

		public class IdentifierTest01
		{
			public static void main(String[] args)
			{

				int a, b, c = 300;   //这里只有c被赋值了a、b是没有被赋值的
				System.out.println(a);
				System.out.println(b);
				System.out.println(c);
			}
		}
	
	方法体中的java代码，是遵守自上而下的顺序执行的
		第一行；
		第二行；
		第三行；
		特点：第二行的代码必须完整结束后，第三行程序才能执行。

	在同一个作用域当中，变量名不能重名，同一个变量名不能重新声明，但可以重新赋值

		public class IdentifierTest01 //类名，可以改
		{
			public static void main(String[] args) //main方法名 args变量名
			{

				int a = 1;
				int b = 2;
				int c = 3;
				System.out.println(a);
				System.out.println(b);
				System.out.println(c);
				int a = 45;  //不能重复声明，会直接编译报错
				System.out.println(a);
			}

		}
	
	变量的作用域
		什么是作用域
			变量的作用域，器是描述的是变量的有效范围
			在什么范围之内是可以被访问的，只要出了这个范围该变量
			就无法访问了
		
		变量的作用域只要记住一句话：
			出了大括号就不认识了

			public class IdentifierTest01 
				{
					public static void main(String[] args) 
					{

						int a = 1;

					}
					public static void other(String[] args )
					{
						System.out.println(a);	//使用不了a，会编译错误
					}
				}

			public class IdentifierTest01 
				{
					static int k = 123;	 //这里的static不能去掉
										 //k的作用域是在类体范围内
					public static void main(String[] args) 
					{

						
					}
					public static void other(String[] args )
					{
						System.out.println(k);
					}
				}
			
			public class IdentifierTest01 
				{
					public static void main(String[] args) 
					{

					for(int a=0;a<10;a++) //a变量的作用域是整个for循环，for循环结束之后，a变量的内存就释放了
						{
							
						}
					System.out.println(a);//不能访问
						
					}
				}
			
			public class IdentifierTest01 
			{
				public static void main(String[] args) 
				{
				int a; //这个作用域是main方法
				for( a=0;a<10;a++)
					{
						
					}
				System.out.println(a);//可以访问
					

				}
			}
	
	变量的分类
		根据变量声明的位置来分类：
			局部变量
				在方法体中声明的变量
			成员变量
				在方法体外类体之内的变量
	
	 在不同的作用域当中，变量名是可以相同的
	 在同一个作用域当中，变量名不能重名
	 类体中不能写java语句，但可以声明变量
	 public class IdentifierTest01 
		{
			static int k = 100;//成员变量
			
			public static void main(String[] args) 
			{
				int a = 3; //局部变量
				
				System.out.println(a);//java遵循就近原则，所以打印的是上面这个局部变量a
					

			}
			static int a= 2;//可以重名，因为不在同一个作用域中
			public static void other(String[] args)
			{ 
				System.out.println(a);

			}

		}
				   
数据类型
	数据类型的作用
		数据类型的作用是指导JVM在运行程序的时候给该数据分配多大的内存空间
	
	java数据类型包括两种
		基本数据类型
			
		引用数据类型【后面讲】
			类
			接口
			数组
			
	基本数据类型
		包括四大类八小种
			第一类 整数型
				byte short int long
			第二类 浮点型
				float double
			第三类 布尔型
				boolean
			第四类 字符型
				char
				
		字符串不属于基本数据类型，属于引用数据类型，字符属于基本数据类型
			字符串用双引号 “zbcv”
			字符用单引号 ‘a’
		
		八种基本数据类型占用空间大小是多少
			基本数据类型		 占用空间 【单位：字节】	范围
			byte				1	   		-128 - 127
			short				2			-32768-32767
			int					4
			long				8
			float				4
			double				8
			boolean				1			 true,false
			char				2			 0-65535
			
			注意char和short表示的个数是相同的，只不过char没负数所以能表示更大的整数

		字节
			1 byte = 8 bit
			1 bit 1/0
            
		整数型当中的byte是1字节 8个比特位，它的范围
			byte类型的最大值是 01111111【1000000（二进制） -1】 = 127【2的七次方减1】，因为最左边是符号位
			byte类型的最小值是  -128
			byte取值范围 -128 到 127    ‘

		关于八种基本数据类型的默认值
			八种基本数据类型的默认值是一切向0看齐
			byte short int long	0
			float double		0.0
			boolean			false[true 1 false 0]
			char			\u00000
			
		成员变量只声明没有赋值，系统会默认赋值【局部变量不会】
			public class IdentifierTest01 
			{
				static byte a;//成员变量
				static short b;
				static int c;
				static long d;
				static float e;
				static double f;
				static boolean g;
				static char h;

				public static void main(String[] args) 
				{
				
				System.out.println(a);
				System.out.println(b);
				System.out.println(c);
				System.out.println(d);
				System.out.println(e);
				System.out.println(f);
				System.out.println(g);
				System.out.println(h);

					

				}


			}

			结果：
				0
				0
				0
				0
				0.0
				0.0
				false

	char类型
		char类型刚好可以存储一个中文
			public class IdentifierTest01 
			{

				public static void main(String[] args) 
				{
				char a = 'a';
				char b = '陈';
				System.out.println(a);
				System.out.println(b);
				}

			}
			
		字符串型不能存储一个字符型，类型不兼容
			public class IdentifierTest01 
				{

					public static void main(String[] args) 
					{
					char a = 'a';
					char b = '陈';
					char c = "b";
					System.out.println(a);
					System.out.println(b);
					System.out.println(c);
					}

				}

			编译结果：
				IdentifierTest01.java:40: 错误: 不兼容的类型: String无法转换为char
				char c = "b";
					 ^
				1 个错误
	
		转义字符
			\在java语言中具有转义功能
			
			System.out.println 输出自带换行，System.out.print输出不带有换行。
			
			\t 制表符	就是tab键
			\n 换行符	就是enter键
			两者ascII码不一样
			\\ 	
			\'
			\"
			\uxxxx unicode编码
			
			
			转义字符在特殊字符前，会把特殊字符转换成普通字符
				System.out.prinln('//');
					第一个反斜杠把第二个反斜杠转移成普通的反斜杠字符
				
				char a = '';
					在java中是不允许这样编写程序
				
				char a = ‘’‘;
				System.out.print(a);
					第一个单引号和第二个配对，最后一个单引号找不到配对的
					
				charf a = '\'';
				System.out.print(a);
					反斜杠具有转义功能，将第二个单引号转换成普通的单引号字符
					
				char a = '“”';
				System.out.print(a);
					编译成功
					
				System.out.print("\"\"");
					这样才能实现打印双引号
					
				char m = '\u4e2d';
					unicode编码
		
		char类型的默认值
			/u0000 代表什么都没有的东西
			
	整数型
		关于整数型字面值
			java语言中的整数型字面值被默认当作int类型处理，要让整数型字面值被当作long类型来处理的话
			需要在
			整数型字面值后面添加l/L，建议使用大写的L
			
		java语言中整数型字面值有三种方式
			十进制 是一种缺省默认的方式
			八进制 在编写八进制整数型字面值的时候需要以0开始
			十六进制 在编写十六进制整数型字面值的时候需要以0x开始
		
			int a = 10;
			int b = 010;
			int c = 0x10;
		
		long类型赋值int类型字面值存在类型转换
			int类型是小容量
			long是大容量
			小容量可以自动转换为大容量
			成为自动类型转换机制
			
			int d = 456;
			System.out.println(d);
			
						
			long d = 2147483648;
			System.out.println(d);
			这个字面值超出int类型的取值范围
			解决方法
				
			long d = 2147483648L;
			System.out.println(d);
			
		强制转换
			public class DateType{

				public static void main (String[] args){
				byte a = 100;
				byte b  = (byte)128; //(byte)这个就是强制类型转换符
				System.out.println(a);
				System.out.println(b);
				
				short c = 100;
				short d = 32767;// java对byte、short、chart有优待，
								//如果字面值没有超出范围，不需要加强制类型转换符，可以直接赋值
				
				short e = (short)32768;//如果超出范围使用强制类型转换符会导致丢失精度，
				比如说这个e最后打印显示是-32767
				System.out.println(d);
				System.out.println(e);
				
				/*
								
				强转机制
					int 强转 short 
					首先int 八字节，short 四字节
					所以32768在int在计算机是
						0000 0000 0000 0000 1000 0000 0000 0000(补码)
					强制转换就是砍一半
					比如32768从int转short是直接变为
						1000 0000 0000 0000(补码)
					这样变为short值就为-32768					
					
				*/
				
				char f = 100;
				char g = 65535;
				char h = (char)65536;
				System.out.print(g);
				System.out.print(h);

				}
			}
				
			结果
				C:\Users\kk\Desktop>java DateType.java
				100
				0
				32767
				-32768
				?
	
	浮点型数据类型
		float 单精度
		double 双精度
		
		关于精度
			double 精度太低不适用于财务软件，为了适用于这种高精度需求的业务
			sun公司提供了一种精度更高的数据类型，不过这种数据类型是引用数据类型：java.math.BigDcimal
		
		关于java的类库
			java提供了非常庞大的类库，需要知道的是java的se类库的字节码在哪？知道se类库的源码在哪？
			C:\Program Files\Java\jdk-13.0.1\lib
		
		关于浮点数字面值的默认类型
			java语言中浮点数字面值被当作double类型来处理
			如果想要当作float类型来处理需要在后面添加f/F
			
		关于float变量的赋值（两种方法）
				
			public class DateType{

			public static void main (String[] args){
			
			double a =  3.14;//变量类型和字面值类型一致，可以编译
			float b = 3.14f;//没有任何强转，字面值类型就是float类型
			float c = (float)3.14;//强转后的赋值
			System.out.println(a);
			System.out.println(b);
			System.out.println(c);

			}
		
		浮点数在二进制内部存储的都是近似值，因为在现实世界中有些数字是无限循环的
		
	布尔型
		在java语言中只有false和true没有其它值，不像c语言当中，0和1 可以表示假和真
		经常用于逻辑运算和条件判断
		
		public class DateType{

			public static void main (String[] args){
			
			boolean a = true;//boolean a = false;
			if(a){
				System.out.print("true");
			}
			else{
				System.out.print("false");
			}
			}
		}
        
    基本数据类型之间的互相转换 转换规则
        1、八种数据类型当中除了布尔类型其它七种之间都可以互相转换
        2、小容量向大容量转换，称为自动类型转换，容量从小到大
            byte < short < int < long < float < double
                    char <
            注：任何浮点类型不管占用多少个字节，都比整数类型大
                char和short可表示的种类数量相同，但是char可表示更大的正整数
        3、从大容量转换为小容量，叫做强制类型转换，需要强制类型转换符，程序才能编译通过，
           但是在运行阶段可能会损失精度，谨慎使用
        4、当整数字面值没有超过byte、short、char的取值范围，可以直接赋值给
            byte、short、char类型的变量
        5、byte、short、char混合运算的时候，各自先转换成int类型再做运算。
        6、多种数据类型，先转换为容量最大的类型再做运算
        注：byte a = (byte)(int)b/3;括号内 的优先级高，
            最后等号右边的编程byte/int 最后是int类型。
            大容量转换为小容量必须夹强制类型转换符。
                  
    分析程序是否编译成功，不要参杂运行阶段
        public class TestDype{
            public static void main(String[] args){
                short a = 1;
                byte b = 2;
                short c = a + b ;
                System.out.println(a);
                
            }
        }
        分析这个程序，你不需要计算结果，你只需要判断语法是否符合java规范，
        因为a + b short类型和byte类型相加，所以全部转换为int类型，那么最后
        short c 就被赋值int类型的数据，int类型转换为short类型需要强制类型转换符
        	
运算符
    关于运算符优先级
        一个表达式有优先级，优先级不确定，使用()来提高优先级
        ()内优先级最高。
    算术运算符
        +
        -
        *
        /
        % 求余【取模】
        ++ 自加1
        -- 自减1
        关于++运算符和--运算符
            以下程序用++举例，--效果类似
            public class OperatorTest{
                public static void main(String[] args){
                    int y=1;
                    //++运算符可以出现在变量后面【单目运算符】
                    y++;
                    //++运算符可以出现在变量后面【单目运算符】
                    ++y;
                    System.out.println(y);
                }
            }
            小结：
                ++运算符可以出现在变量前后，结果都是对变量进行自加1
            
        ++ 出现在变量后
            规则：先做赋值运算，再对变量进行自加1
        
            public class OperatorTest{
                public static void main(String[] args){
                    int a = 1;
                    int b = a ++;
                    System.out.println(a);
                    System.out.println(b);
                }
            }
            结果：
                C:\Users\pipi\Desktop>java OperatorTest.java
                2
                1
                            
        ++ 出现再变量前
            规则： 先做自加1，再赋值
            
            public class OperatorTest{
                public static void main(String[] args){
                    int a = 1;
                    int b = ++ a;
                    System.out.println(a);
                    System.out.println(b);
                    } 
                }
            结果：
                C:\Users\pipi\Desktop>java OperatorTest.java
                2
                2
                
        变形
            public class OperatorTest{
                public static void main(String[] args){
                    int a = 1;
                    int b = a ++;
                    System.out.println(a ++);
                    System.out.println(b ++);
                    } 
                }
                
            结果：
                C:\Users\pipi\Desktop>java OperatorTest.java
                2
                1
 
	关系运算符
        >
        >=
        <
        <=
        ==
        !=
        
        =是赋值运算符，==是关系运算符
        关系运算符的运算结果一定是布尔类型： true/false
        
        public class OperatorTest{
            public static void main(String[] args){
                int a = 1;
                int b = 2;
                System.out.println(a <= b);

                } 
            }
        关系运算符计算的ab两个变量的值的大小关系

	逻辑运算符
        &   与
        |   或
        ！  非
        ^   异或  不同为true，相同为false
        
        &&  短路与
        ||  短路或
        
        1、逻辑运算符要求两边的算子是布尔类型，并且逻辑运算符最终运算结果俄式一个布尔类型
        2、短路与（或）和逻辑与（或）最终的运算结果是相同的，只不过短路与（或）
            存在短路现象
        3、什么情况下发生短路现象
        4、什么情况下用短路与
            前一个表达式结果为false
        5、什么情况下用短路或
            前一个表达式结果为true
        
        public class OperatorTest{
            public static void main(String[] args){
                int x = 10;
                int y = 8;
                System.out.println(x < y & ++x < y);//与操作，会把表达式完整运行
                System.out.println(x);
                System.out.println(x < y && ++x < y);//短路与操作，因为x < y已经确定是false所以短路与后面的表达式不会运行
                System.out.println(x);
                /*
                    从某种角度来说短路与更加智能,由于后面的表达式不执行，所以执行效率高
                    所以这种方式在实际开发中使用较多，但是在某些特殊环境下需要执行后面表达式
                    这种情况就得使用逻辑与
                */
                } 
            }
            
        
	赋值类运算符
        两种
            基本赋值运算符
                =
            扩展类赋值运算符
                +=
                -=
                *=
                /=
                %=
                
        赋值类运算符优先级
            先执行等号右边的表达式，将执行结果赋值给左边的变量
            
        关于拓展类赋值运算符的实际替换
             public class OperatorTest{
                public static void main(String[] args){
                    int a = 1;
                    byte b = 0;
                    //b = a + 5;
                    //b = (byte)(a+55)
                    b += 5;//这行语句实际上等于(byte)(b+5) 其实并不等于b = b + 5
                    System.out.println(b);
                    }   
                }
            结论：
                拓展类赋值运算符不改变结果类型
                拓展类赋值运算符会自动进行强转
        
	字符串连接运算符
        关于+
            加法求和
                +两边的数据是数字，一定进行加法运算
                
            字符串的连接运算
                +两边有一个是字符串，就一定会进行字符串连接运算，且连接运算的结果
                还是一个字符串类型
                
            在表示中出现多个+，在没有添加括号的前提下，
            遵循自左向右的顺序依次运算
            
            
            public class OperatorTest{
                public static void main(String[] args){
                    int a = 10;
                    int b = 40;
                    int c = a + b;
                    System.out.println(10+20);//求和
                    System.out.println(a + " + " + b + " = " + c);//字符串连接
                    System.out.println(10 + a + "20");
                    System.out.println(10 + (a + "20" ));//与上者执行顺序不同执行
                    } 
            }    
        
        关于String
            String是java当中提供的字符串类型
            String.class字节码文件
            
            public class OperatorTest{
                public static void main(String[] args){
                    int i = 10;
                    String username = "zhangsan";
                    System.out.println("success login, welcome " + username + "!!!!!");
                    } 
                    
                }
            
               
	三元运算符/三元运算符/条件运算符
        语法规则：
            布尔表达式 ？ 表达式1 ： 表达式2
        
        执行原理
           布尔表达式为ture，把表达式1作为整个表达式的结果。
           布尔表达式为false，把表达式2作为整个表达式的结果。
        
        正确理解执行原理
           public class OperatorTest{
                public static void main(String[] args){
                    //编译错误
                    //10;
                    //编译错误
                    //'男'
                    //不是一个完整的java语句
                    
                    boolean sex = true;
                    //编译错误
                    //sex ? '男' : '女';
                    
                    char c = sex ? '男' : '女';
                    System.out.println(c);
                    
                    //语法问题，类型不兼容
                    // char c1 = sex ? "男" : '女';
                    
                    //可以执行
                    System.out.println(sex ? '男' : '女');
                   
                    } 
                    
                }

控制语句
    分类
        选择结构
            if if..else
            switch
        循环结构
            for
            while
            do..while
        控制循环的语句
            break
            continue
	
	选择结构
		if语句
			if语句的语法结构
				第一种
					if(布尔表达式){
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}
					
				第二种
					if(布尔表达式){
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}else{
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}
				
				第三种
					if(布尔表达式){
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}else if(布尔表达式){
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}else if(布尔表达式){
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}
					
				第四种
					if(布尔表达式){
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}else if(布尔表达式){
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}else if(布尔表达式){
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}else{
						java语句;
						java语句;
						java语句;
						java语句;
						...
					}
					
			重点：       
				对于java语句中的if语句来说，只要有一个分支执行，整个if语句全部结束
			
			注意：       
				以上带有else分支，这两种方式可以保证百分百有分支执行
			
			可以嵌套
				所有控制语句可以互相嵌套使用的，只要合理嵌套
				if(){
					if(){
					
					}
				}
				else{
					if(){
					
					}
					else{
					
					}
				}
				嵌套使用时，代码格式必须完美【该缩进就得缩进】，使用大括号包围的代码
				需要缩进
			
			if 语句的分支中只有一条java语句，大括号可以省略不写
				if(布尔语句){
					一条java语句;
				}
				//这种方式不推荐使用，别人这么写我能看懂就行
				if (布尔语句) 一条java语句；

				//以上两种方式相等，后面加多少java语句都不受if条件影响是否执行
				if (布尔语句) 
					一条java语句；
					一条java语句;//这里这个语句不被if语句影响是否执行
				if (布尔语句) 
					一条java语句；一条java语句;//这也是
				

				
		接受用户接盘输入
		
			public class InputContent{
			public static void main(String[] args){
				//第一步创建键盘扫描对象
				java.util.Scanner s = new java.util.Scanner(System.in);
				//第二部调用Scanner对象的next方法开始接收键盘输入
				String input_String = s.next();//接收以字符串形式的文本
				System.out.print(input_String);
				int input_Int = s.nextInt();//接收以整数型int的形式的数字
				System.out.println(input_Int);
			}
			}

		关于switch语句
			属于选择结构，也是分支语句
			语法结构
				switch(int或String类型的字面值或变量){
					case int或String类型的字面值或变量:
					//case后的值和switch括号里面的值去匹配，
					//如果匹配成功执行case内容
						java语句;
						...
						/*
							break;没写break会直接执行下一个语句的内容，不管
							下一个情况条件是否匹配,这种情况叫做case穿透现象。
						*/
					case int或String类型的字面值或变量:
						java语句;
						...
						break;//遇到这个整个分支结束

					case int或String类型的字面值或变量:
						java语句;
						...
						break;

					case int或String类型的字面值或变量:
						java语句;
						...
						break;
					
					default ://所有数据匹配不上时，执行这个语句内容
						java语句;
						...

				}
				
			switch 执行原理
				switch 小括号里面的数据和case后面的数据匹配
				匹配成功执行case的内容，自上而下依次匹配

				匹配成功的分支执行，分支中最后有break语句的话，整个switch语句终止

				匹配成功的分支执行，分支中没有break语句的话，直接进入下一个分支（不进行匹配），
				这种现象被称为case穿透现象【break语句可以避免穿透】

				所有分支没有匹配成功，当有default的语句话，会执行default分支当中的程序
				
				swtich case后面只能是int 或者String（jdk6以上版本）类型的数据，不能是探测其它类型。
				当然byte、short、chart也可以直接写到switch和case后面，因为他们可以
				进行自动类型转换，byte、short、char可以自动转换成int类型。
				
				case合并
					int i = 10;
					switch (i){
						case 1: case 2: case 3:case 10:
						//1 2 3 10 都可以匹配，都可以执行这个case里面的内容
						System.out.prinln("123");
					}



	关于循环
		循环结构
			执行需要重复执行的代码的作用，循环体和计数器相互配合使用

		基本所有编程语言都支持循环包括三种
			for
			while
			do...while
		
		for循环
			语法结构
				for(初始化表达式; 布尔表达式; 更新表达式){
					java语句;
					...
				}
			for 循环的执行原理
				初始化表达式、布尔表达式、更新表达式都不是必须的！
				但两个分号必须写

				public class Test{
					public static void main(String[] args){
						for(;;){
						System.out.print(123);//会一直执行这个语句
						}
					}
				}

				初始化表达式最先执行，在for循环当中只执行一次

				布尔表达式只能是true/false不能是其他值

				for的执行过程
					先执行初始化表达式，并且表达式只执行一次
					
					判断布尔表达式的结果是true/false
						true
							执行循环体
							执行更新表达式
							判断布尔表达式的结果是true/false
								true
									执行循环体
									执行更新表达式
									判断....
								false
									循环退出

						false
							循环退出

			i 的作用域
				在for里面定义的i的作用域只在for循环里
				在for外面定义的i的作用域在main方法里
				public class Test{
					public static void main(String[] args){
						for(int i = 1; i <= 10;i++ ){

						System.out.println(123);
						}

						int i;
						for(i = 1; i <= 10;i++ ){

						System.out.println(123);
						}  
					}
					}

			for与if嵌套使用
			for与循环结构嵌套
			99乘法表
			10000以内的素数，每八个一行

		关于while循环语句
			语法结构
				while(布尔表达式){
					循环体;
				}
					
			while循环的执行原理
				先判断布尔表达式的结果：
					true
						执行循环体
						判断布尔表达式的结果：
							true
								判断...
								...
								
							false
								退出循环体
					false
						退出循环	

			while循环的循环次数
				0~N次
			
		do...while
			语法结构
				do{
					循环体；
				}while(布尔表达式);
			执行原理
				先执行循环体
				判断布尔表达式
					true
						执行循环体
						判断...
							...
					false
						退出循环
			执行次数
				1~N次
			


		控制循环的语句
			break
				是java语言的关键字，翻译为中断
				
				break;是一个完整的java语句

				break常用于循环语句中，用来终止循环

				终止哪个循环
					一般情况下break终止的是最近的循环
						public class Test01{
							public static void main(String[] args){
								for(int i = 3; i>0; i--){
									for(int j = 0; j<10; j++){
										if (j == 5){
											break;
										}
										System.out.println(j);
									}
								}
								
							}
						}
					
					指定循环终止
						指定某个循环可以直接终止该循环
							取名字 A:循环
							终止   break A;
						
						public class Test01{
							public static void main(String[] args){
								A:for(int i = 3; i>0; i--){
									B:for(int j = 0; j<10; j++){
										if (j == 5){
											break A;
										}
										System.out.println(j);
									}
								}
								
							}
						}

						public class Test01{
							public static void main(String[] args){
								int i = 0;
								int j = 0;
								A:do{
									j++;
								B: do{
									i++  ;
									if(i == 5){
										break A;
										
									}
									System.out.println(i);
									
									}while(i<10);
									System.out.println("++++++++++++++++++++");

								}while(i<10);

							}
						}

			continue
				continue;是一个完整的java语句

				主要用于循环中，控制循环

				break和continue的区别
					break 终止循环
					continue 终止本次循环，直接进入下一个循环
							continue后面的语句不执行
				
				//输出奇数
					public class Test01{
						public static void main(String[] args){ 
							for(int i = 0; i<100; i++){
								if(i%2 == 0){
									continue;
								}
								System.out.println(i);
							}

						}
					}
				
				指定循环continue
					//break语法一样
					//当i 为偶数时continue只输出i(奇数)j
					public class Test01{
						public static void main(String[] args){ 
							A:for(int i = 0; i<10; i++){
								
								for(int j =0; j<10; j++){
									if(i%2 == 0){
										continue A;
									}
									System.out.print(i);
									System.out.println(j);
								}
									
								System.out.println("======================");
							
							}

						}
					}





	

	

		
			
			
					

		

			


		



    
        
        
        
        
            
        
        
                
                
    
                

	
		
		